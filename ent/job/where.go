// Code generated by ent, DO NOT EDIT.

package job

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/srad/mediasink/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldType, v))
}

// Payload applies equality check predicate on the "payload" field. It's identical to PayloadEQ.
func Payload(v []byte) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPayload, v))
}

// AttemptCount applies equality check predicate on the "attempt_count" field. It's identical to AttemptCountEQ.
func AttemptCount(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldAttemptCount, v))
}

// LastError applies equality check predicate on the "last_error" field. It's identical to LastErrorEQ.
func LastError(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldLastError, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldUpdatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldType, v))
}

// PayloadEQ applies the EQ predicate on the "payload" field.
func PayloadEQ(v []byte) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPayload, v))
}

// PayloadNEQ applies the NEQ predicate on the "payload" field.
func PayloadNEQ(v []byte) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldPayload, v))
}

// PayloadIn applies the In predicate on the "payload" field.
func PayloadIn(vs ...[]byte) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldPayload, vs...))
}

// PayloadNotIn applies the NotIn predicate on the "payload" field.
func PayloadNotIn(vs ...[]byte) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldPayload, vs...))
}

// PayloadGT applies the GT predicate on the "payload" field.
func PayloadGT(v []byte) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldPayload, v))
}

// PayloadGTE applies the GTE predicate on the "payload" field.
func PayloadGTE(v []byte) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldPayload, v))
}

// PayloadLT applies the LT predicate on the "payload" field.
func PayloadLT(v []byte) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldPayload, v))
}

// PayloadLTE applies the LTE predicate on the "payload" field.
func PayloadLTE(v []byte) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldPayload, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldStatus, vs...))
}

// AttemptCountEQ applies the EQ predicate on the "attempt_count" field.
func AttemptCountEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldAttemptCount, v))
}

// AttemptCountNEQ applies the NEQ predicate on the "attempt_count" field.
func AttemptCountNEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldAttemptCount, v))
}

// AttemptCountIn applies the In predicate on the "attempt_count" field.
func AttemptCountIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldAttemptCount, vs...))
}

// AttemptCountNotIn applies the NotIn predicate on the "attempt_count" field.
func AttemptCountNotIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldAttemptCount, vs...))
}

// AttemptCountGT applies the GT predicate on the "attempt_count" field.
func AttemptCountGT(v int) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldAttemptCount, v))
}

// AttemptCountGTE applies the GTE predicate on the "attempt_count" field.
func AttemptCountGTE(v int) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldAttemptCount, v))
}

// AttemptCountLT applies the LT predicate on the "attempt_count" field.
func AttemptCountLT(v int) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldAttemptCount, v))
}

// AttemptCountLTE applies the LTE predicate on the "attempt_count" field.
func AttemptCountLTE(v int) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldAttemptCount, v))
}

// LastErrorEQ applies the EQ predicate on the "last_error" field.
func LastErrorEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldLastError, v))
}

// LastErrorNEQ applies the NEQ predicate on the "last_error" field.
func LastErrorNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldLastError, v))
}

// LastErrorIn applies the In predicate on the "last_error" field.
func LastErrorIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldLastError, vs...))
}

// LastErrorNotIn applies the NotIn predicate on the "last_error" field.
func LastErrorNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldLastError, vs...))
}

// LastErrorGT applies the GT predicate on the "last_error" field.
func LastErrorGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldLastError, v))
}

// LastErrorGTE applies the GTE predicate on the "last_error" field.
func LastErrorGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldLastError, v))
}

// LastErrorLT applies the LT predicate on the "last_error" field.
func LastErrorLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldLastError, v))
}

// LastErrorLTE applies the LTE predicate on the "last_error" field.
func LastErrorLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldLastError, v))
}

// LastErrorContains applies the Contains predicate on the "last_error" field.
func LastErrorContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldLastError, v))
}

// LastErrorHasPrefix applies the HasPrefix predicate on the "last_error" field.
func LastErrorHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldLastError, v))
}

// LastErrorHasSuffix applies the HasSuffix predicate on the "last_error" field.
func LastErrorHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldLastError, v))
}

// LastErrorIsNil applies the IsNil predicate on the "last_error" field.
func LastErrorIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldLastError))
}

// LastErrorNotNil applies the NotNil predicate on the "last_error" field.
func LastErrorNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldLastError))
}

// LastErrorEqualFold applies the EqualFold predicate on the "last_error" field.
func LastErrorEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldLastError, v))
}

// LastErrorContainsFold applies the ContainsFold predicate on the "last_error" field.
func LastErrorContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldLastError, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Job) predicate.Job {
	return predicate.Job(sql.NotPredicates(p))
}
