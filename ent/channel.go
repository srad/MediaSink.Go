// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/srad/mediasink/ent/channel"
)

// Channel is the model entity for the Channel schema.
type Channel struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ChannelName holds the value of the "channel_name" field.
	ChannelName string `json:"channel_name,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// SkipStart holds the value of the "skip_start" field.
	SkipStart uint `json:"skip_start,omitempty"`
	// MinDuration holds the value of the "min_duration" field.
	MinDuration uint `json:"min_duration,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// IsFav holds the value of the "is_fav" field.
	IsFav bool `json:"is_fav,omitempty"`
	// IsPaused holds the value of the "is_paused" field.
	IsPaused bool `json:"is_paused,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted bool `json:"is_deleted,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChannelQuery when eager-loading is set.
	Edges        ChannelEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ChannelEdges holds the relations/edges for other nodes in the graph.
type ChannelEdges struct {
	// Recordings holds the value of the recordings edge.
	Recordings []*Recording `json:"recordings,omitempty"`
	// Jobs holds the value of the jobs edge.
	Jobs []*Job `json:"jobs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RecordingsOrErr returns the Recordings value or an error if the edge
// was not loaded in eager-loading.
func (e ChannelEdges) RecordingsOrErr() ([]*Recording, error) {
	if e.loadedTypes[0] {
		return e.Recordings, nil
	}
	return nil, &NotLoadedError{edge: "recordings"}
}

// JobsOrErr returns the Jobs value or an error if the edge
// was not loaded in eager-loading.
func (e ChannelEdges) JobsOrErr() ([]*Job, error) {
	if e.loadedTypes[1] {
		return e.Jobs, nil
	}
	return nil, &NotLoadedError{edge: "jobs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Channel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case channel.FieldTags:
			values[i] = new([]byte)
		case channel.FieldIsFav, channel.FieldIsPaused, channel.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case channel.FieldID, channel.FieldSkipStart, channel.FieldMinDuration:
			values[i] = new(sql.NullInt64)
		case channel.FieldChannelName, channel.FieldDisplayName, channel.FieldURL:
			values[i] = new(sql.NullString)
		case channel.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Channel fields.
func (c *Channel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case channel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case channel.FieldChannelName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_name", values[i])
			} else if value.Valid {
				c.ChannelName = value.String
			}
		case channel.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				c.DisplayName = value.String
			}
		case channel.FieldSkipStart:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field skip_start", values[i])
			} else if value.Valid {
				c.SkipStart = uint(value.Int64)
			}
		case channel.FieldMinDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min_duration", values[i])
			} else if value.Valid {
				c.MinDuration = uint(value.Int64)
			}
		case channel.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				c.URL = value.String
			}
		case channel.FieldIsFav:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_fav", values[i])
			} else if value.Valid {
				c.IsFav = value.Bool
			}
		case channel.FieldIsPaused:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_paused", values[i])
			} else if value.Valid {
				c.IsPaused = value.Bool
			}
		case channel.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				c.IsDeleted = value.Bool
			}
		case channel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case channel.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Channel.
// This includes values selected through modifiers, order, etc.
func (c *Channel) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryRecordings queries the "recordings" edge of the Channel entity.
func (c *Channel) QueryRecordings() *RecordingQuery {
	return NewChannelClient(c.config).QueryRecordings(c)
}

// QueryJobs queries the "jobs" edge of the Channel entity.
func (c *Channel) QueryJobs() *JobQuery {
	return NewChannelClient(c.config).QueryJobs(c)
}

// Update returns a builder for updating this Channel.
// Note that you need to call Channel.Unwrap() before calling this method if this Channel
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Channel) Update() *ChannelUpdateOne {
	return NewChannelClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Channel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Channel) Unwrap() *Channel {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Channel is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Channel) String() string {
	var builder strings.Builder
	builder.WriteString("Channel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("channel_name=")
	builder.WriteString(c.ChannelName)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(c.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("skip_start=")
	builder.WriteString(fmt.Sprintf("%v", c.SkipStart))
	builder.WriteString(", ")
	builder.WriteString("min_duration=")
	builder.WriteString(fmt.Sprintf("%v", c.MinDuration))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(c.URL)
	builder.WriteString(", ")
	builder.WriteString("is_fav=")
	builder.WriteString(fmt.Sprintf("%v", c.IsFav))
	builder.WriteString(", ")
	builder.WriteString("is_paused=")
	builder.WriteString(fmt.Sprintf("%v", c.IsPaused))
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", c.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", c.Tags))
	builder.WriteByte(')')
	return builder.String()
}

// Channels is a parsable slice of Channel.
type Channels []*Channel
