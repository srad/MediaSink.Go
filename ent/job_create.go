// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/srad/mediasink/ent/job"
)

// JobCreate is the builder for creating a Job entity.
type JobCreate struct {
	config
	mutation *JobMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (jc *JobCreate) SetType(s string) *JobCreate {
	jc.mutation.SetType(s)
	return jc
}

// SetPayload sets the "payload" field.
func (jc *JobCreate) SetPayload(b []byte) *JobCreate {
	jc.mutation.SetPayload(b)
	return jc
}

// SetStatus sets the "status" field.
func (jc *JobCreate) SetStatus(j job.Status) *JobCreate {
	jc.mutation.SetStatus(j)
	return jc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (jc *JobCreate) SetNillableStatus(j *job.Status) *JobCreate {
	if j != nil {
		jc.SetStatus(*j)
	}
	return jc
}

// SetAttemptCount sets the "attempt_count" field.
func (jc *JobCreate) SetAttemptCount(i int) *JobCreate {
	jc.mutation.SetAttemptCount(i)
	return jc
}

// SetNillableAttemptCount sets the "attempt_count" field if the given value is not nil.
func (jc *JobCreate) SetNillableAttemptCount(i *int) *JobCreate {
	if i != nil {
		jc.SetAttemptCount(*i)
	}
	return jc
}

// SetLastError sets the "last_error" field.
func (jc *JobCreate) SetLastError(s string) *JobCreate {
	jc.mutation.SetLastError(s)
	return jc
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (jc *JobCreate) SetNillableLastError(s *string) *JobCreate {
	if s != nil {
		jc.SetLastError(*s)
	}
	return jc
}

// SetCreatedAt sets the "created_at" field.
func (jc *JobCreate) SetCreatedAt(t time.Time) *JobCreate {
	jc.mutation.SetCreatedAt(t)
	return jc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jc *JobCreate) SetNillableCreatedAt(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetCreatedAt(*t)
	}
	return jc
}

// SetUpdatedAt sets the "updated_at" field.
func (jc *JobCreate) SetUpdatedAt(t time.Time) *JobCreate {
	jc.mutation.SetUpdatedAt(t)
	return jc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jc *JobCreate) SetNillableUpdatedAt(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetUpdatedAt(*t)
	}
	return jc
}

// SetID sets the "id" field.
func (jc *JobCreate) SetID(u uuid.UUID) *JobCreate {
	jc.mutation.SetID(u)
	return jc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jc *JobCreate) SetNillableID(u *uuid.UUID) *JobCreate {
	if u != nil {
		jc.SetID(*u)
	}
	return jc
}

// Mutation returns the JobMutation object of the builder.
func (jc *JobCreate) Mutation() *JobMutation {
	return jc.mutation
}

// Save creates the Job in the database.
func (jc *JobCreate) Save(ctx context.Context) (*Job, error) {
	jc.defaults()
	return withHooks(ctx, jc.sqlSave, jc.mutation, jc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jc *JobCreate) SaveX(ctx context.Context) *Job {
	v, err := jc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jc *JobCreate) Exec(ctx context.Context) error {
	_, err := jc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jc *JobCreate) ExecX(ctx context.Context) {
	if err := jc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jc *JobCreate) defaults() {
	if _, ok := jc.mutation.Status(); !ok {
		v := job.DefaultStatus
		jc.mutation.SetStatus(v)
	}
	if _, ok := jc.mutation.AttemptCount(); !ok {
		v := job.DefaultAttemptCount
		jc.mutation.SetAttemptCount(v)
	}
	if _, ok := jc.mutation.CreatedAt(); !ok {
		v := job.DefaultCreatedAt()
		jc.mutation.SetCreatedAt(v)
	}
	if _, ok := jc.mutation.UpdatedAt(); !ok {
		v := job.DefaultUpdatedAt()
		jc.mutation.SetUpdatedAt(v)
	}
	if _, ok := jc.mutation.ID(); !ok {
		v := job.DefaultID()
		jc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jc *JobCreate) check() error {
	if _, ok := jc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Job.type"`)}
	}
	if v, ok := jc.mutation.GetType(); ok {
		if err := job.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Job.type": %w`, err)}
		}
	}
	if _, ok := jc.mutation.Payload(); !ok {
		return &ValidationError{Name: "payload", err: errors.New(`ent: missing required field "Job.payload"`)}
	}
	if v, ok := jc.mutation.Payload(); ok {
		if err := job.PayloadValidator(v); err != nil {
			return &ValidationError{Name: "payload", err: fmt.Errorf(`ent: validator failed for field "Job.payload": %w`, err)}
		}
	}
	if _, ok := jc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Job.status"`)}
	}
	if v, ok := jc.mutation.Status(); ok {
		if err := job.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Job.status": %w`, err)}
		}
	}
	if _, ok := jc.mutation.AttemptCount(); !ok {
		return &ValidationError{Name: "attempt_count", err: errors.New(`ent: missing required field "Job.attempt_count"`)}
	}
	if v, ok := jc.mutation.AttemptCount(); ok {
		if err := job.AttemptCountValidator(v); err != nil {
			return &ValidationError{Name: "attempt_count", err: fmt.Errorf(`ent: validator failed for field "Job.attempt_count": %w`, err)}
		}
	}
	if _, ok := jc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Job.created_at"`)}
	}
	if _, ok := jc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Job.updated_at"`)}
	}
	return nil
}

func (jc *JobCreate) sqlSave(ctx context.Context) (*Job, error) {
	if err := jc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	jc.mutation.id = &_node.ID
	jc.mutation.done = true
	return _node, nil
}

func (jc *JobCreate) createSpec() (*Job, *sqlgraph.CreateSpec) {
	var (
		_node = &Job{config: jc.config}
		_spec = sqlgraph.NewCreateSpec(job.Table, sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID))
	)
	if id, ok := jc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := jc.mutation.GetType(); ok {
		_spec.SetField(job.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := jc.mutation.Payload(); ok {
		_spec.SetField(job.FieldPayload, field.TypeBytes, value)
		_node.Payload = value
	}
	if value, ok := jc.mutation.Status(); ok {
		_spec.SetField(job.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := jc.mutation.AttemptCount(); ok {
		_spec.SetField(job.FieldAttemptCount, field.TypeInt, value)
		_node.AttemptCount = value
	}
	if value, ok := jc.mutation.LastError(); ok {
		_spec.SetField(job.FieldLastError, field.TypeString, value)
		_node.LastError = &value
	}
	if value, ok := jc.mutation.CreatedAt(); ok {
		_spec.SetField(job.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jc.mutation.UpdatedAt(); ok {
		_spec.SetField(job.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// JobCreateBulk is the builder for creating many Job entities in bulk.
type JobCreateBulk struct {
	config
	err      error
	builders []*JobCreate
}

// Save creates the Job entities in the database.
func (jcb *JobCreateBulk) Save(ctx context.Context) ([]*Job, error) {
	if jcb.err != nil {
		return nil, jcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jcb.builders))
	nodes := make([]*Job, len(jcb.builders))
	mutators := make([]Mutator, len(jcb.builders))
	for i := range jcb.builders {
		func(i int, root context.Context) {
			builder := jcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jcb *JobCreateBulk) SaveX(ctx context.Context) []*Job {
	v, err := jcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jcb *JobCreateBulk) Exec(ctx context.Context) error {
	_, err := jcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jcb *JobCreateBulk) ExecX(ctx context.Context) {
	if err := jcb.Exec(ctx); err != nil {
		panic(err)
	}
}
