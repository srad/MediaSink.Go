// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/srad/mediasink/ent/command"
	"github.com/srad/mediasink/ent/predicate"
)

// CommandUpdate is the builder for updating Command entities.
type CommandUpdate struct {
	config
	hooks    []Hook
	mutation *CommandMutation
}

// Where appends a list predicates to the CommandUpdate builder.
func (cu *CommandUpdate) Where(ps ...predicate.Command) *CommandUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetPid sets the "pid" field.
func (cu *CommandUpdate) SetPid(i int) *CommandUpdate {
	cu.mutation.ResetPid()
	cu.mutation.SetPid(i)
	return cu
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (cu *CommandUpdate) SetNillablePid(i *int) *CommandUpdate {
	if i != nil {
		cu.SetPid(*i)
	}
	return cu
}

// AddPid adds i to the "pid" field.
func (cu *CommandUpdate) AddPid(i int) *CommandUpdate {
	cu.mutation.AddPid(i)
	return cu
}

// ClearPid clears the value of the "pid" field.
func (cu *CommandUpdate) ClearPid() *CommandUpdate {
	cu.mutation.ClearPid()
	return cu
}

// SetCommand sets the "command" field.
func (cu *CommandUpdate) SetCommand(s string) *CommandUpdate {
	cu.mutation.SetCommand(s)
	return cu
}

// SetNillableCommand sets the "command" field if the given value is not nil.
func (cu *CommandUpdate) SetNillableCommand(s *string) *CommandUpdate {
	if s != nil {
		cu.SetCommand(*s)
	}
	return cu
}

// SetProgress sets the "progress" field.
func (cu *CommandUpdate) SetProgress(s string) *CommandUpdate {
	cu.mutation.SetProgress(s)
	return cu
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (cu *CommandUpdate) SetNillableProgress(s *string) *CommandUpdate {
	if s != nil {
		cu.SetProgress(*s)
	}
	return cu
}

// ClearProgress clears the value of the "progress" field.
func (cu *CommandUpdate) ClearProgress() *CommandUpdate {
	cu.mutation.ClearProgress()
	return cu
}

// SetInfo sets the "info" field.
func (cu *CommandUpdate) SetInfo(s string) *CommandUpdate {
	cu.mutation.SetInfo(s)
	return cu
}

// SetNillableInfo sets the "info" field if the given value is not nil.
func (cu *CommandUpdate) SetNillableInfo(s *string) *CommandUpdate {
	if s != nil {
		cu.SetInfo(*s)
	}
	return cu
}

// ClearInfo clears the value of the "info" field.
func (cu *CommandUpdate) ClearInfo() *CommandUpdate {
	cu.mutation.ClearInfo()
	return cu
}

// SetArgs sets the "args" field.
func (cu *CommandUpdate) SetArgs(s string) *CommandUpdate {
	cu.mutation.SetArgs(s)
	return cu
}

// SetNillableArgs sets the "args" field if the given value is not nil.
func (cu *CommandUpdate) SetNillableArgs(s *string) *CommandUpdate {
	if s != nil {
		cu.SetArgs(*s)
	}
	return cu
}

// ClearArgs clears the value of the "args" field.
func (cu *CommandUpdate) ClearArgs() *CommandUpdate {
	cu.mutation.ClearArgs()
	return cu
}

// Mutation returns the CommandMutation object of the builder.
func (cu *CommandUpdate) Mutation() *CommandMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommandUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommandUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommandUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommandUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CommandUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(command.Table, command.Columns, sqlgraph.NewFieldSpec(command.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Pid(); ok {
		_spec.SetField(command.FieldPid, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedPid(); ok {
		_spec.AddField(command.FieldPid, field.TypeInt, value)
	}
	if cu.mutation.PidCleared() {
		_spec.ClearField(command.FieldPid, field.TypeInt)
	}
	if value, ok := cu.mutation.Command(); ok {
		_spec.SetField(command.FieldCommand, field.TypeString, value)
	}
	if value, ok := cu.mutation.Progress(); ok {
		_spec.SetField(command.FieldProgress, field.TypeString, value)
	}
	if cu.mutation.ProgressCleared() {
		_spec.ClearField(command.FieldProgress, field.TypeString)
	}
	if value, ok := cu.mutation.Info(); ok {
		_spec.SetField(command.FieldInfo, field.TypeString, value)
	}
	if cu.mutation.InfoCleared() {
		_spec.ClearField(command.FieldInfo, field.TypeString)
	}
	if value, ok := cu.mutation.Args(); ok {
		_spec.SetField(command.FieldArgs, field.TypeString, value)
	}
	if cu.mutation.ArgsCleared() {
		_spec.ClearField(command.FieldArgs, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{command.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommandUpdateOne is the builder for updating a single Command entity.
type CommandUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommandMutation
}

// SetPid sets the "pid" field.
func (cuo *CommandUpdateOne) SetPid(i int) *CommandUpdateOne {
	cuo.mutation.ResetPid()
	cuo.mutation.SetPid(i)
	return cuo
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (cuo *CommandUpdateOne) SetNillablePid(i *int) *CommandUpdateOne {
	if i != nil {
		cuo.SetPid(*i)
	}
	return cuo
}

// AddPid adds i to the "pid" field.
func (cuo *CommandUpdateOne) AddPid(i int) *CommandUpdateOne {
	cuo.mutation.AddPid(i)
	return cuo
}

// ClearPid clears the value of the "pid" field.
func (cuo *CommandUpdateOne) ClearPid() *CommandUpdateOne {
	cuo.mutation.ClearPid()
	return cuo
}

// SetCommand sets the "command" field.
func (cuo *CommandUpdateOne) SetCommand(s string) *CommandUpdateOne {
	cuo.mutation.SetCommand(s)
	return cuo
}

// SetNillableCommand sets the "command" field if the given value is not nil.
func (cuo *CommandUpdateOne) SetNillableCommand(s *string) *CommandUpdateOne {
	if s != nil {
		cuo.SetCommand(*s)
	}
	return cuo
}

// SetProgress sets the "progress" field.
func (cuo *CommandUpdateOne) SetProgress(s string) *CommandUpdateOne {
	cuo.mutation.SetProgress(s)
	return cuo
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (cuo *CommandUpdateOne) SetNillableProgress(s *string) *CommandUpdateOne {
	if s != nil {
		cuo.SetProgress(*s)
	}
	return cuo
}

// ClearProgress clears the value of the "progress" field.
func (cuo *CommandUpdateOne) ClearProgress() *CommandUpdateOne {
	cuo.mutation.ClearProgress()
	return cuo
}

// SetInfo sets the "info" field.
func (cuo *CommandUpdateOne) SetInfo(s string) *CommandUpdateOne {
	cuo.mutation.SetInfo(s)
	return cuo
}

// SetNillableInfo sets the "info" field if the given value is not nil.
func (cuo *CommandUpdateOne) SetNillableInfo(s *string) *CommandUpdateOne {
	if s != nil {
		cuo.SetInfo(*s)
	}
	return cuo
}

// ClearInfo clears the value of the "info" field.
func (cuo *CommandUpdateOne) ClearInfo() *CommandUpdateOne {
	cuo.mutation.ClearInfo()
	return cuo
}

// SetArgs sets the "args" field.
func (cuo *CommandUpdateOne) SetArgs(s string) *CommandUpdateOne {
	cuo.mutation.SetArgs(s)
	return cuo
}

// SetNillableArgs sets the "args" field if the given value is not nil.
func (cuo *CommandUpdateOne) SetNillableArgs(s *string) *CommandUpdateOne {
	if s != nil {
		cuo.SetArgs(*s)
	}
	return cuo
}

// ClearArgs clears the value of the "args" field.
func (cuo *CommandUpdateOne) ClearArgs() *CommandUpdateOne {
	cuo.mutation.ClearArgs()
	return cuo
}

// Mutation returns the CommandMutation object of the builder.
func (cuo *CommandUpdateOne) Mutation() *CommandMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CommandUpdate builder.
func (cuo *CommandUpdateOne) Where(ps ...predicate.Command) *CommandUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommandUpdateOne) Select(field string, fields ...string) *CommandUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Command entity.
func (cuo *CommandUpdateOne) Save(ctx context.Context) (*Command, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommandUpdateOne) SaveX(ctx context.Context) *Command {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommandUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommandUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CommandUpdateOne) sqlSave(ctx context.Context) (_node *Command, err error) {
	_spec := sqlgraph.NewUpdateSpec(command.Table, command.Columns, sqlgraph.NewFieldSpec(command.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Command.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, command.FieldID)
		for _, f := range fields {
			if !command.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != command.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Pid(); ok {
		_spec.SetField(command.FieldPid, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedPid(); ok {
		_spec.AddField(command.FieldPid, field.TypeInt, value)
	}
	if cuo.mutation.PidCleared() {
		_spec.ClearField(command.FieldPid, field.TypeInt)
	}
	if value, ok := cuo.mutation.Command(); ok {
		_spec.SetField(command.FieldCommand, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Progress(); ok {
		_spec.SetField(command.FieldProgress, field.TypeString, value)
	}
	if cuo.mutation.ProgressCleared() {
		_spec.ClearField(command.FieldProgress, field.TypeString)
	}
	if value, ok := cuo.mutation.Info(); ok {
		_spec.SetField(command.FieldInfo, field.TypeString, value)
	}
	if cuo.mutation.InfoCleared() {
		_spec.ClearField(command.FieldInfo, field.TypeString)
	}
	if value, ok := cuo.mutation.Args(); ok {
		_spec.SetField(command.FieldArgs, field.TypeString, value)
	}
	if cuo.mutation.ArgsCleared() {
		_spec.ClearField(command.FieldArgs, field.TypeString)
	}
	_node = &Command{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{command.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
