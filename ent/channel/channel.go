// Code generated by ent, DO NOT EDIT.

package channel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the channel type in the database.
	Label = "channel"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldChannelName holds the string denoting the channel_name field in the database.
	FieldChannelName = "channel_name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldSkipStart holds the string denoting the skip_start field in the database.
	FieldSkipStart = "skip_start"
	// FieldMinDuration holds the string denoting the min_duration field in the database.
	FieldMinDuration = "min_duration"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldIsFav holds the string denoting the is_fav field in the database.
	FieldIsFav = "is_fav"
	// FieldIsPaused holds the string denoting the is_paused field in the database.
	FieldIsPaused = "is_paused"
	// FieldIsDeleted holds the string denoting the is_deleted field in the database.
	FieldIsDeleted = "is_deleted"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// EdgeRecordings holds the string denoting the recordings edge name in mutations.
	EdgeRecordings = "recordings"
	// EdgeJobs holds the string denoting the jobs edge name in mutations.
	EdgeJobs = "jobs"
	// Table holds the table name of the channel in the database.
	Table = "channels"
	// RecordingsTable is the table that holds the recordings relation/edge.
	RecordingsTable = "recordings"
	// RecordingsInverseTable is the table name for the Recording entity.
	// It exists in this package in order to avoid circular dependency with the "recording" package.
	RecordingsInverseTable = "recordings"
	// RecordingsColumn is the table column denoting the recordings relation/edge.
	RecordingsColumn = "channel_recordings"
	// JobsTable is the table that holds the jobs relation/edge.
	JobsTable = "jobs"
	// JobsInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	JobsInverseTable = "jobs"
	// JobsColumn is the table column denoting the jobs relation/edge.
	JobsColumn = "channel_jobs"
)

// Columns holds all SQL columns for channel fields.
var Columns = []string{
	FieldID,
	FieldChannelName,
	FieldDisplayName,
	FieldSkipStart,
	FieldMinDuration,
	FieldURL,
	FieldIsFav,
	FieldIsPaused,
	FieldIsDeleted,
	FieldCreatedAt,
	FieldTags,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ChannelNameValidator is a validator for the "channel_name" field. It is called by the builders before save.
	ChannelNameValidator func(string) error
	// DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
	// DefaultSkipStart holds the default value on creation for the "skip_start" field.
	DefaultSkipStart uint
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// DefaultIsFav holds the default value on creation for the "is_fav" field.
	DefaultIsFav bool
	// DefaultIsPaused holds the default value on creation for the "is_paused" field.
	DefaultIsPaused bool
	// DefaultIsDeleted holds the default value on creation for the "is_deleted" field.
	DefaultIsDeleted bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Channel queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByChannelName orders the results by the channel_name field.
func ByChannelName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// BySkipStart orders the results by the skip_start field.
func BySkipStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSkipStart, opts...).ToFunc()
}

// ByMinDuration orders the results by the min_duration field.
func ByMinDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinDuration, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByIsFav orders the results by the is_fav field.
func ByIsFav(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsFav, opts...).ToFunc()
}

// ByIsPaused orders the results by the is_paused field.
func ByIsPaused(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPaused, opts...).ToFunc()
}

// ByIsDeleted orders the results by the is_deleted field.
func ByIsDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDeleted, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByRecordingsCount orders the results by recordings count.
func ByRecordingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecordingsStep(), opts...)
	}
}

// ByRecordings orders the results by recordings terms.
func ByRecordings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecordingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobsCount orders the results by jobs count.
func ByJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobsStep(), opts...)
	}
}

// ByJobs orders the results by jobs terms.
func ByJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRecordingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecordingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RecordingsTable, RecordingsColumn),
	)
}
func newJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobsTable, JobsColumn),
	)
}
