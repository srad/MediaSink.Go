// Code generated by ent, DO NOT EDIT.

package channel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/srad/mediasink/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldID, id))
}

// ChannelName applies equality check predicate on the "channel_name" field. It's identical to ChannelNameEQ.
func ChannelName(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldChannelName, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldDisplayName, v))
}

// SkipStart applies equality check predicate on the "skip_start" field. It's identical to SkipStartEQ.
func SkipStart(v uint) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldSkipStart, v))
}

// MinDuration applies equality check predicate on the "min_duration" field. It's identical to MinDurationEQ.
func MinDuration(v uint) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldMinDuration, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldURL, v))
}

// IsFav applies equality check predicate on the "is_fav" field. It's identical to IsFavEQ.
func IsFav(v bool) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldIsFav, v))
}

// IsPaused applies equality check predicate on the "is_paused" field. It's identical to IsPausedEQ.
func IsPaused(v bool) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldIsPaused, v))
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v bool) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldIsDeleted, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldCreatedAt, v))
}

// ChannelNameEQ applies the EQ predicate on the "channel_name" field.
func ChannelNameEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldChannelName, v))
}

// ChannelNameNEQ applies the NEQ predicate on the "channel_name" field.
func ChannelNameNEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldChannelName, v))
}

// ChannelNameIn applies the In predicate on the "channel_name" field.
func ChannelNameIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldChannelName, vs...))
}

// ChannelNameNotIn applies the NotIn predicate on the "channel_name" field.
func ChannelNameNotIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldChannelName, vs...))
}

// ChannelNameGT applies the GT predicate on the "channel_name" field.
func ChannelNameGT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldChannelName, v))
}

// ChannelNameGTE applies the GTE predicate on the "channel_name" field.
func ChannelNameGTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldChannelName, v))
}

// ChannelNameLT applies the LT predicate on the "channel_name" field.
func ChannelNameLT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldChannelName, v))
}

// ChannelNameLTE applies the LTE predicate on the "channel_name" field.
func ChannelNameLTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldChannelName, v))
}

// ChannelNameContains applies the Contains predicate on the "channel_name" field.
func ChannelNameContains(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContains(FieldChannelName, v))
}

// ChannelNameHasPrefix applies the HasPrefix predicate on the "channel_name" field.
func ChannelNameHasPrefix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasPrefix(FieldChannelName, v))
}

// ChannelNameHasSuffix applies the HasSuffix predicate on the "channel_name" field.
func ChannelNameHasSuffix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasSuffix(FieldChannelName, v))
}

// ChannelNameEqualFold applies the EqualFold predicate on the "channel_name" field.
func ChannelNameEqualFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEqualFold(FieldChannelName, v))
}

// ChannelNameContainsFold applies the ContainsFold predicate on the "channel_name" field.
func ChannelNameContainsFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContainsFold(FieldChannelName, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContainsFold(FieldDisplayName, v))
}

// SkipStartEQ applies the EQ predicate on the "skip_start" field.
func SkipStartEQ(v uint) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldSkipStart, v))
}

// SkipStartNEQ applies the NEQ predicate on the "skip_start" field.
func SkipStartNEQ(v uint) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldSkipStart, v))
}

// SkipStartIn applies the In predicate on the "skip_start" field.
func SkipStartIn(vs ...uint) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldSkipStart, vs...))
}

// SkipStartNotIn applies the NotIn predicate on the "skip_start" field.
func SkipStartNotIn(vs ...uint) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldSkipStart, vs...))
}

// SkipStartGT applies the GT predicate on the "skip_start" field.
func SkipStartGT(v uint) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldSkipStart, v))
}

// SkipStartGTE applies the GTE predicate on the "skip_start" field.
func SkipStartGTE(v uint) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldSkipStart, v))
}

// SkipStartLT applies the LT predicate on the "skip_start" field.
func SkipStartLT(v uint) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldSkipStart, v))
}

// SkipStartLTE applies the LTE predicate on the "skip_start" field.
func SkipStartLTE(v uint) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldSkipStart, v))
}

// MinDurationEQ applies the EQ predicate on the "min_duration" field.
func MinDurationEQ(v uint) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldMinDuration, v))
}

// MinDurationNEQ applies the NEQ predicate on the "min_duration" field.
func MinDurationNEQ(v uint) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldMinDuration, v))
}

// MinDurationIn applies the In predicate on the "min_duration" field.
func MinDurationIn(vs ...uint) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldMinDuration, vs...))
}

// MinDurationNotIn applies the NotIn predicate on the "min_duration" field.
func MinDurationNotIn(vs ...uint) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldMinDuration, vs...))
}

// MinDurationGT applies the GT predicate on the "min_duration" field.
func MinDurationGT(v uint) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldMinDuration, v))
}

// MinDurationGTE applies the GTE predicate on the "min_duration" field.
func MinDurationGTE(v uint) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldMinDuration, v))
}

// MinDurationLT applies the LT predicate on the "min_duration" field.
func MinDurationLT(v uint) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldMinDuration, v))
}

// MinDurationLTE applies the LTE predicate on the "min_duration" field.
func MinDurationLTE(v uint) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldMinDuration, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContainsFold(FieldURL, v))
}

// IsFavEQ applies the EQ predicate on the "is_fav" field.
func IsFavEQ(v bool) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldIsFav, v))
}

// IsFavNEQ applies the NEQ predicate on the "is_fav" field.
func IsFavNEQ(v bool) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldIsFav, v))
}

// IsPausedEQ applies the EQ predicate on the "is_paused" field.
func IsPausedEQ(v bool) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldIsPaused, v))
}

// IsPausedNEQ applies the NEQ predicate on the "is_paused" field.
func IsPausedNEQ(v bool) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldIsPaused, v))
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v bool) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldIsDeleted, v))
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v bool) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldIsDeleted, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldCreatedAt, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.Channel {
	return predicate.Channel(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.Channel {
	return predicate.Channel(sql.FieldNotNull(FieldTags))
}

// HasRecordings applies the HasEdge predicate on the "recordings" edge.
func HasRecordings() predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RecordingsTable, RecordingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecordingsWith applies the HasEdge predicate on the "recordings" edge with a given conditions (other predicates).
func HasRecordingsWith(preds ...predicate.Recording) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		step := newRecordingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobs applies the HasEdge predicate on the "jobs" edge.
func HasJobs() predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JobsTable, JobsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobsWith applies the HasEdge predicate on the "jobs" edge with a given conditions (other predicates).
func HasJobsWith(preds ...predicate.Job) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		step := newJobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Channel) predicate.Channel {
	return predicate.Channel(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Channel) predicate.Channel {
	return predicate.Channel(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Channel) predicate.Channel {
	return predicate.Channel(sql.NotPredicates(p))
}
