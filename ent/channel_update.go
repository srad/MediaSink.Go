// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/srad/mediasink/ent/channel"
	"github.com/srad/mediasink/ent/job"
	"github.com/srad/mediasink/ent/predicate"
	"github.com/srad/mediasink/ent/recording"
)

// ChannelUpdate is the builder for updating Channel entities.
type ChannelUpdate struct {
	config
	hooks    []Hook
	mutation *ChannelMutation
}

// Where appends a list predicates to the ChannelUpdate builder.
func (cu *ChannelUpdate) Where(ps ...predicate.Channel) *ChannelUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetChannelName sets the "channel_name" field.
func (cu *ChannelUpdate) SetChannelName(s string) *ChannelUpdate {
	cu.mutation.SetChannelName(s)
	return cu
}

// SetNillableChannelName sets the "channel_name" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableChannelName(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetChannelName(*s)
	}
	return cu
}

// SetDisplayName sets the "display_name" field.
func (cu *ChannelUpdate) SetDisplayName(s string) *ChannelUpdate {
	cu.mutation.SetDisplayName(s)
	return cu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableDisplayName(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetDisplayName(*s)
	}
	return cu
}

// SetSkipStart sets the "skip_start" field.
func (cu *ChannelUpdate) SetSkipStart(u uint) *ChannelUpdate {
	cu.mutation.ResetSkipStart()
	cu.mutation.SetSkipStart(u)
	return cu
}

// SetNillableSkipStart sets the "skip_start" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableSkipStart(u *uint) *ChannelUpdate {
	if u != nil {
		cu.SetSkipStart(*u)
	}
	return cu
}

// AddSkipStart adds u to the "skip_start" field.
func (cu *ChannelUpdate) AddSkipStart(u int) *ChannelUpdate {
	cu.mutation.AddSkipStart(u)
	return cu
}

// SetMinDuration sets the "min_duration" field.
func (cu *ChannelUpdate) SetMinDuration(u uint) *ChannelUpdate {
	cu.mutation.ResetMinDuration()
	cu.mutation.SetMinDuration(u)
	return cu
}

// SetNillableMinDuration sets the "min_duration" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableMinDuration(u *uint) *ChannelUpdate {
	if u != nil {
		cu.SetMinDuration(*u)
	}
	return cu
}

// AddMinDuration adds u to the "min_duration" field.
func (cu *ChannelUpdate) AddMinDuration(u int) *ChannelUpdate {
	cu.mutation.AddMinDuration(u)
	return cu
}

// SetURL sets the "url" field.
func (cu *ChannelUpdate) SetURL(s string) *ChannelUpdate {
	cu.mutation.SetURL(s)
	return cu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableURL(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetURL(*s)
	}
	return cu
}

// SetIsFav sets the "is_fav" field.
func (cu *ChannelUpdate) SetIsFav(b bool) *ChannelUpdate {
	cu.mutation.SetIsFav(b)
	return cu
}

// SetNillableIsFav sets the "is_fav" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableIsFav(b *bool) *ChannelUpdate {
	if b != nil {
		cu.SetIsFav(*b)
	}
	return cu
}

// SetIsPaused sets the "is_paused" field.
func (cu *ChannelUpdate) SetIsPaused(b bool) *ChannelUpdate {
	cu.mutation.SetIsPaused(b)
	return cu
}

// SetNillableIsPaused sets the "is_paused" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableIsPaused(b *bool) *ChannelUpdate {
	if b != nil {
		cu.SetIsPaused(*b)
	}
	return cu
}

// SetIsDeleted sets the "is_deleted" field.
func (cu *ChannelUpdate) SetIsDeleted(b bool) *ChannelUpdate {
	cu.mutation.SetIsDeleted(b)
	return cu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableIsDeleted(b *bool) *ChannelUpdate {
	if b != nil {
		cu.SetIsDeleted(*b)
	}
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *ChannelUpdate) SetCreatedAt(t time.Time) *ChannelUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableCreatedAt(t *time.Time) *ChannelUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetTags sets the "tags" field.
func (cu *ChannelUpdate) SetTags(s []string) *ChannelUpdate {
	cu.mutation.SetTags(s)
	return cu
}

// AppendTags appends s to the "tags" field.
func (cu *ChannelUpdate) AppendTags(s []string) *ChannelUpdate {
	cu.mutation.AppendTags(s)
	return cu
}

// ClearTags clears the value of the "tags" field.
func (cu *ChannelUpdate) ClearTags() *ChannelUpdate {
	cu.mutation.ClearTags()
	return cu
}

// AddRecordingIDs adds the "recordings" edge to the Recording entity by IDs.
func (cu *ChannelUpdate) AddRecordingIDs(ids ...int) *ChannelUpdate {
	cu.mutation.AddRecordingIDs(ids...)
	return cu
}

// AddRecordings adds the "recordings" edges to the Recording entity.
func (cu *ChannelUpdate) AddRecordings(r ...*Recording) *ChannelUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddRecordingIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the Job entity by IDs.
func (cu *ChannelUpdate) AddJobIDs(ids ...uuid.UUID) *ChannelUpdate {
	cu.mutation.AddJobIDs(ids...)
	return cu
}

// AddJobs adds the "jobs" edges to the Job entity.
func (cu *ChannelUpdate) AddJobs(j ...*Job) *ChannelUpdate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cu.AddJobIDs(ids...)
}

// Mutation returns the ChannelMutation object of the builder.
func (cu *ChannelUpdate) Mutation() *ChannelMutation {
	return cu.mutation
}

// ClearRecordings clears all "recordings" edges to the Recording entity.
func (cu *ChannelUpdate) ClearRecordings() *ChannelUpdate {
	cu.mutation.ClearRecordings()
	return cu
}

// RemoveRecordingIDs removes the "recordings" edge to Recording entities by IDs.
func (cu *ChannelUpdate) RemoveRecordingIDs(ids ...int) *ChannelUpdate {
	cu.mutation.RemoveRecordingIDs(ids...)
	return cu
}

// RemoveRecordings removes "recordings" edges to Recording entities.
func (cu *ChannelUpdate) RemoveRecordings(r ...*Recording) *ChannelUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveRecordingIDs(ids...)
}

// ClearJobs clears all "jobs" edges to the Job entity.
func (cu *ChannelUpdate) ClearJobs() *ChannelUpdate {
	cu.mutation.ClearJobs()
	return cu
}

// RemoveJobIDs removes the "jobs" edge to Job entities by IDs.
func (cu *ChannelUpdate) RemoveJobIDs(ids ...uuid.UUID) *ChannelUpdate {
	cu.mutation.RemoveJobIDs(ids...)
	return cu
}

// RemoveJobs removes "jobs" edges to Job entities.
func (cu *ChannelUpdate) RemoveJobs(j ...*Job) *ChannelUpdate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cu.RemoveJobIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChannelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChannelUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChannelUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ChannelUpdate) check() error {
	if v, ok := cu.mutation.ChannelName(); ok {
		if err := channel.ChannelNameValidator(v); err != nil {
			return &ValidationError{Name: "channel_name", err: fmt.Errorf(`ent: validator failed for field "Channel.channel_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.DisplayName(); ok {
		if err := channel.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "Channel.display_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.URL(); ok {
		if err := channel.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Channel.url": %w`, err)}
		}
	}
	return nil
}

func (cu *ChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(channel.Table, channel.Columns, sqlgraph.NewFieldSpec(channel.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.ChannelName(); ok {
		_spec.SetField(channel.FieldChannelName, field.TypeString, value)
	}
	if value, ok := cu.mutation.DisplayName(); ok {
		_spec.SetField(channel.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := cu.mutation.SkipStart(); ok {
		_spec.SetField(channel.FieldSkipStart, field.TypeUint, value)
	}
	if value, ok := cu.mutation.AddedSkipStart(); ok {
		_spec.AddField(channel.FieldSkipStart, field.TypeUint, value)
	}
	if value, ok := cu.mutation.MinDuration(); ok {
		_spec.SetField(channel.FieldMinDuration, field.TypeUint, value)
	}
	if value, ok := cu.mutation.AddedMinDuration(); ok {
		_spec.AddField(channel.FieldMinDuration, field.TypeUint, value)
	}
	if value, ok := cu.mutation.URL(); ok {
		_spec.SetField(channel.FieldURL, field.TypeString, value)
	}
	if value, ok := cu.mutation.IsFav(); ok {
		_spec.SetField(channel.FieldIsFav, field.TypeBool, value)
	}
	if value, ok := cu.mutation.IsPaused(); ok {
		_spec.SetField(channel.FieldIsPaused, field.TypeBool, value)
	}
	if value, ok := cu.mutation.IsDeleted(); ok {
		_spec.SetField(channel.FieldIsDeleted, field.TypeBool, value)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(channel.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Tags(); ok {
		_spec.SetField(channel.FieldTags, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, channel.FieldTags, value)
		})
	}
	if cu.mutation.TagsCleared() {
		_spec.ClearField(channel.FieldTags, field.TypeJSON)
	}
	if cu.mutation.RecordingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.RecordingsTable,
			Columns: []string{channel.RecordingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recording.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedRecordingsIDs(); len(nodes) > 0 && !cu.mutation.RecordingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.RecordingsTable,
			Columns: []string{channel.RecordingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recording.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RecordingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.RecordingsTable,
			Columns: []string{channel.RecordingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recording.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.JobsTable,
			Columns: []string{channel.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedJobsIDs(); len(nodes) > 0 && !cu.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.JobsTable,
			Columns: []string{channel.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.JobsTable,
			Columns: []string{channel.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChannelUpdateOne is the builder for updating a single Channel entity.
type ChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChannelMutation
}

// SetChannelName sets the "channel_name" field.
func (cuo *ChannelUpdateOne) SetChannelName(s string) *ChannelUpdateOne {
	cuo.mutation.SetChannelName(s)
	return cuo
}

// SetNillableChannelName sets the "channel_name" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableChannelName(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetChannelName(*s)
	}
	return cuo
}

// SetDisplayName sets the "display_name" field.
func (cuo *ChannelUpdateOne) SetDisplayName(s string) *ChannelUpdateOne {
	cuo.mutation.SetDisplayName(s)
	return cuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableDisplayName(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetDisplayName(*s)
	}
	return cuo
}

// SetSkipStart sets the "skip_start" field.
func (cuo *ChannelUpdateOne) SetSkipStart(u uint) *ChannelUpdateOne {
	cuo.mutation.ResetSkipStart()
	cuo.mutation.SetSkipStart(u)
	return cuo
}

// SetNillableSkipStart sets the "skip_start" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableSkipStart(u *uint) *ChannelUpdateOne {
	if u != nil {
		cuo.SetSkipStart(*u)
	}
	return cuo
}

// AddSkipStart adds u to the "skip_start" field.
func (cuo *ChannelUpdateOne) AddSkipStart(u int) *ChannelUpdateOne {
	cuo.mutation.AddSkipStart(u)
	return cuo
}

// SetMinDuration sets the "min_duration" field.
func (cuo *ChannelUpdateOne) SetMinDuration(u uint) *ChannelUpdateOne {
	cuo.mutation.ResetMinDuration()
	cuo.mutation.SetMinDuration(u)
	return cuo
}

// SetNillableMinDuration sets the "min_duration" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableMinDuration(u *uint) *ChannelUpdateOne {
	if u != nil {
		cuo.SetMinDuration(*u)
	}
	return cuo
}

// AddMinDuration adds u to the "min_duration" field.
func (cuo *ChannelUpdateOne) AddMinDuration(u int) *ChannelUpdateOne {
	cuo.mutation.AddMinDuration(u)
	return cuo
}

// SetURL sets the "url" field.
func (cuo *ChannelUpdateOne) SetURL(s string) *ChannelUpdateOne {
	cuo.mutation.SetURL(s)
	return cuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableURL(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetURL(*s)
	}
	return cuo
}

// SetIsFav sets the "is_fav" field.
func (cuo *ChannelUpdateOne) SetIsFav(b bool) *ChannelUpdateOne {
	cuo.mutation.SetIsFav(b)
	return cuo
}

// SetNillableIsFav sets the "is_fav" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableIsFav(b *bool) *ChannelUpdateOne {
	if b != nil {
		cuo.SetIsFav(*b)
	}
	return cuo
}

// SetIsPaused sets the "is_paused" field.
func (cuo *ChannelUpdateOne) SetIsPaused(b bool) *ChannelUpdateOne {
	cuo.mutation.SetIsPaused(b)
	return cuo
}

// SetNillableIsPaused sets the "is_paused" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableIsPaused(b *bool) *ChannelUpdateOne {
	if b != nil {
		cuo.SetIsPaused(*b)
	}
	return cuo
}

// SetIsDeleted sets the "is_deleted" field.
func (cuo *ChannelUpdateOne) SetIsDeleted(b bool) *ChannelUpdateOne {
	cuo.mutation.SetIsDeleted(b)
	return cuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableIsDeleted(b *bool) *ChannelUpdateOne {
	if b != nil {
		cuo.SetIsDeleted(*b)
	}
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *ChannelUpdateOne) SetCreatedAt(t time.Time) *ChannelUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableCreatedAt(t *time.Time) *ChannelUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetTags sets the "tags" field.
func (cuo *ChannelUpdateOne) SetTags(s []string) *ChannelUpdateOne {
	cuo.mutation.SetTags(s)
	return cuo
}

// AppendTags appends s to the "tags" field.
func (cuo *ChannelUpdateOne) AppendTags(s []string) *ChannelUpdateOne {
	cuo.mutation.AppendTags(s)
	return cuo
}

// ClearTags clears the value of the "tags" field.
func (cuo *ChannelUpdateOne) ClearTags() *ChannelUpdateOne {
	cuo.mutation.ClearTags()
	return cuo
}

// AddRecordingIDs adds the "recordings" edge to the Recording entity by IDs.
func (cuo *ChannelUpdateOne) AddRecordingIDs(ids ...int) *ChannelUpdateOne {
	cuo.mutation.AddRecordingIDs(ids...)
	return cuo
}

// AddRecordings adds the "recordings" edges to the Recording entity.
func (cuo *ChannelUpdateOne) AddRecordings(r ...*Recording) *ChannelUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddRecordingIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the Job entity by IDs.
func (cuo *ChannelUpdateOne) AddJobIDs(ids ...uuid.UUID) *ChannelUpdateOne {
	cuo.mutation.AddJobIDs(ids...)
	return cuo
}

// AddJobs adds the "jobs" edges to the Job entity.
func (cuo *ChannelUpdateOne) AddJobs(j ...*Job) *ChannelUpdateOne {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cuo.AddJobIDs(ids...)
}

// Mutation returns the ChannelMutation object of the builder.
func (cuo *ChannelUpdateOne) Mutation() *ChannelMutation {
	return cuo.mutation
}

// ClearRecordings clears all "recordings" edges to the Recording entity.
func (cuo *ChannelUpdateOne) ClearRecordings() *ChannelUpdateOne {
	cuo.mutation.ClearRecordings()
	return cuo
}

// RemoveRecordingIDs removes the "recordings" edge to Recording entities by IDs.
func (cuo *ChannelUpdateOne) RemoveRecordingIDs(ids ...int) *ChannelUpdateOne {
	cuo.mutation.RemoveRecordingIDs(ids...)
	return cuo
}

// RemoveRecordings removes "recordings" edges to Recording entities.
func (cuo *ChannelUpdateOne) RemoveRecordings(r ...*Recording) *ChannelUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveRecordingIDs(ids...)
}

// ClearJobs clears all "jobs" edges to the Job entity.
func (cuo *ChannelUpdateOne) ClearJobs() *ChannelUpdateOne {
	cuo.mutation.ClearJobs()
	return cuo
}

// RemoveJobIDs removes the "jobs" edge to Job entities by IDs.
func (cuo *ChannelUpdateOne) RemoveJobIDs(ids ...uuid.UUID) *ChannelUpdateOne {
	cuo.mutation.RemoveJobIDs(ids...)
	return cuo
}

// RemoveJobs removes "jobs" edges to Job entities.
func (cuo *ChannelUpdateOne) RemoveJobs(j ...*Job) *ChannelUpdateOne {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cuo.RemoveJobIDs(ids...)
}

// Where appends a list predicates to the ChannelUpdate builder.
func (cuo *ChannelUpdateOne) Where(ps ...predicate.Channel) *ChannelUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChannelUpdateOne) Select(field string, fields ...string) *ChannelUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Channel entity.
func (cuo *ChannelUpdateOne) Save(ctx context.Context) (*Channel, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChannelUpdateOne) SaveX(ctx context.Context) *Channel {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChannelUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ChannelUpdateOne) check() error {
	if v, ok := cuo.mutation.ChannelName(); ok {
		if err := channel.ChannelNameValidator(v); err != nil {
			return &ValidationError{Name: "channel_name", err: fmt.Errorf(`ent: validator failed for field "Channel.channel_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.DisplayName(); ok {
		if err := channel.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "Channel.display_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.URL(); ok {
		if err := channel.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Channel.url": %w`, err)}
		}
	}
	return nil
}

func (cuo *ChannelUpdateOne) sqlSave(ctx context.Context) (_node *Channel, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(channel.Table, channel.Columns, sqlgraph.NewFieldSpec(channel.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Channel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, channel.FieldID)
		for _, f := range fields {
			if !channel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != channel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.ChannelName(); ok {
		_spec.SetField(channel.FieldChannelName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.DisplayName(); ok {
		_spec.SetField(channel.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.SkipStart(); ok {
		_spec.SetField(channel.FieldSkipStart, field.TypeUint, value)
	}
	if value, ok := cuo.mutation.AddedSkipStart(); ok {
		_spec.AddField(channel.FieldSkipStart, field.TypeUint, value)
	}
	if value, ok := cuo.mutation.MinDuration(); ok {
		_spec.SetField(channel.FieldMinDuration, field.TypeUint, value)
	}
	if value, ok := cuo.mutation.AddedMinDuration(); ok {
		_spec.AddField(channel.FieldMinDuration, field.TypeUint, value)
	}
	if value, ok := cuo.mutation.URL(); ok {
		_spec.SetField(channel.FieldURL, field.TypeString, value)
	}
	if value, ok := cuo.mutation.IsFav(); ok {
		_spec.SetField(channel.FieldIsFav, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.IsPaused(); ok {
		_spec.SetField(channel.FieldIsPaused, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.IsDeleted(); ok {
		_spec.SetField(channel.FieldIsDeleted, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(channel.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Tags(); ok {
		_spec.SetField(channel.FieldTags, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, channel.FieldTags, value)
		})
	}
	if cuo.mutation.TagsCleared() {
		_spec.ClearField(channel.FieldTags, field.TypeJSON)
	}
	if cuo.mutation.RecordingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.RecordingsTable,
			Columns: []string{channel.RecordingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recording.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedRecordingsIDs(); len(nodes) > 0 && !cuo.mutation.RecordingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.RecordingsTable,
			Columns: []string{channel.RecordingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recording.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RecordingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.RecordingsTable,
			Columns: []string{channel.RecordingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recording.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.JobsTable,
			Columns: []string{channel.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedJobsIDs(); len(nodes) > 0 && !cuo.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.JobsTable,
			Columns: []string{channel.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.JobsTable,
			Columns: []string{channel.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Channel{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
