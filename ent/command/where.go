// Code generated by ent, DO NOT EDIT.

package command

import (
	"entgo.io/ent/dialect/sql"
	"github.com/srad/mediasink/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Command {
	return predicate.Command(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Command {
	return predicate.Command(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Command {
	return predicate.Command(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Command {
	return predicate.Command(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Command {
	return predicate.Command(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Command {
	return predicate.Command(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Command {
	return predicate.Command(sql.FieldLTE(FieldID, id))
}

// Pid applies equality check predicate on the "pid" field. It's identical to PidEQ.
func Pid(v int) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldPid, v))
}

// Command applies equality check predicate on the "command" field. It's identical to CommandEQ.
func Command(v string) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldCommand, v))
}

// Progress applies equality check predicate on the "progress" field. It's identical to ProgressEQ.
func Progress(v string) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldProgress, v))
}

// Info applies equality check predicate on the "info" field. It's identical to InfoEQ.
func Info(v string) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldInfo, v))
}

// Args applies equality check predicate on the "args" field. It's identical to ArgsEQ.
func Args(v string) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldArgs, v))
}

// PidEQ applies the EQ predicate on the "pid" field.
func PidEQ(v int) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldPid, v))
}

// PidNEQ applies the NEQ predicate on the "pid" field.
func PidNEQ(v int) predicate.Command {
	return predicate.Command(sql.FieldNEQ(FieldPid, v))
}

// PidIn applies the In predicate on the "pid" field.
func PidIn(vs ...int) predicate.Command {
	return predicate.Command(sql.FieldIn(FieldPid, vs...))
}

// PidNotIn applies the NotIn predicate on the "pid" field.
func PidNotIn(vs ...int) predicate.Command {
	return predicate.Command(sql.FieldNotIn(FieldPid, vs...))
}

// PidGT applies the GT predicate on the "pid" field.
func PidGT(v int) predicate.Command {
	return predicate.Command(sql.FieldGT(FieldPid, v))
}

// PidGTE applies the GTE predicate on the "pid" field.
func PidGTE(v int) predicate.Command {
	return predicate.Command(sql.FieldGTE(FieldPid, v))
}

// PidLT applies the LT predicate on the "pid" field.
func PidLT(v int) predicate.Command {
	return predicate.Command(sql.FieldLT(FieldPid, v))
}

// PidLTE applies the LTE predicate on the "pid" field.
func PidLTE(v int) predicate.Command {
	return predicate.Command(sql.FieldLTE(FieldPid, v))
}

// PidIsNil applies the IsNil predicate on the "pid" field.
func PidIsNil() predicate.Command {
	return predicate.Command(sql.FieldIsNull(FieldPid))
}

// PidNotNil applies the NotNil predicate on the "pid" field.
func PidNotNil() predicate.Command {
	return predicate.Command(sql.FieldNotNull(FieldPid))
}

// CommandEQ applies the EQ predicate on the "command" field.
func CommandEQ(v string) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldCommand, v))
}

// CommandNEQ applies the NEQ predicate on the "command" field.
func CommandNEQ(v string) predicate.Command {
	return predicate.Command(sql.FieldNEQ(FieldCommand, v))
}

// CommandIn applies the In predicate on the "command" field.
func CommandIn(vs ...string) predicate.Command {
	return predicate.Command(sql.FieldIn(FieldCommand, vs...))
}

// CommandNotIn applies the NotIn predicate on the "command" field.
func CommandNotIn(vs ...string) predicate.Command {
	return predicate.Command(sql.FieldNotIn(FieldCommand, vs...))
}

// CommandGT applies the GT predicate on the "command" field.
func CommandGT(v string) predicate.Command {
	return predicate.Command(sql.FieldGT(FieldCommand, v))
}

// CommandGTE applies the GTE predicate on the "command" field.
func CommandGTE(v string) predicate.Command {
	return predicate.Command(sql.FieldGTE(FieldCommand, v))
}

// CommandLT applies the LT predicate on the "command" field.
func CommandLT(v string) predicate.Command {
	return predicate.Command(sql.FieldLT(FieldCommand, v))
}

// CommandLTE applies the LTE predicate on the "command" field.
func CommandLTE(v string) predicate.Command {
	return predicate.Command(sql.FieldLTE(FieldCommand, v))
}

// CommandContains applies the Contains predicate on the "command" field.
func CommandContains(v string) predicate.Command {
	return predicate.Command(sql.FieldContains(FieldCommand, v))
}

// CommandHasPrefix applies the HasPrefix predicate on the "command" field.
func CommandHasPrefix(v string) predicate.Command {
	return predicate.Command(sql.FieldHasPrefix(FieldCommand, v))
}

// CommandHasSuffix applies the HasSuffix predicate on the "command" field.
func CommandHasSuffix(v string) predicate.Command {
	return predicate.Command(sql.FieldHasSuffix(FieldCommand, v))
}

// CommandEqualFold applies the EqualFold predicate on the "command" field.
func CommandEqualFold(v string) predicate.Command {
	return predicate.Command(sql.FieldEqualFold(FieldCommand, v))
}

// CommandContainsFold applies the ContainsFold predicate on the "command" field.
func CommandContainsFold(v string) predicate.Command {
	return predicate.Command(sql.FieldContainsFold(FieldCommand, v))
}

// ProgressEQ applies the EQ predicate on the "progress" field.
func ProgressEQ(v string) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldProgress, v))
}

// ProgressNEQ applies the NEQ predicate on the "progress" field.
func ProgressNEQ(v string) predicate.Command {
	return predicate.Command(sql.FieldNEQ(FieldProgress, v))
}

// ProgressIn applies the In predicate on the "progress" field.
func ProgressIn(vs ...string) predicate.Command {
	return predicate.Command(sql.FieldIn(FieldProgress, vs...))
}

// ProgressNotIn applies the NotIn predicate on the "progress" field.
func ProgressNotIn(vs ...string) predicate.Command {
	return predicate.Command(sql.FieldNotIn(FieldProgress, vs...))
}

// ProgressGT applies the GT predicate on the "progress" field.
func ProgressGT(v string) predicate.Command {
	return predicate.Command(sql.FieldGT(FieldProgress, v))
}

// ProgressGTE applies the GTE predicate on the "progress" field.
func ProgressGTE(v string) predicate.Command {
	return predicate.Command(sql.FieldGTE(FieldProgress, v))
}

// ProgressLT applies the LT predicate on the "progress" field.
func ProgressLT(v string) predicate.Command {
	return predicate.Command(sql.FieldLT(FieldProgress, v))
}

// ProgressLTE applies the LTE predicate on the "progress" field.
func ProgressLTE(v string) predicate.Command {
	return predicate.Command(sql.FieldLTE(FieldProgress, v))
}

// ProgressContains applies the Contains predicate on the "progress" field.
func ProgressContains(v string) predicate.Command {
	return predicate.Command(sql.FieldContains(FieldProgress, v))
}

// ProgressHasPrefix applies the HasPrefix predicate on the "progress" field.
func ProgressHasPrefix(v string) predicate.Command {
	return predicate.Command(sql.FieldHasPrefix(FieldProgress, v))
}

// ProgressHasSuffix applies the HasSuffix predicate on the "progress" field.
func ProgressHasSuffix(v string) predicate.Command {
	return predicate.Command(sql.FieldHasSuffix(FieldProgress, v))
}

// ProgressIsNil applies the IsNil predicate on the "progress" field.
func ProgressIsNil() predicate.Command {
	return predicate.Command(sql.FieldIsNull(FieldProgress))
}

// ProgressNotNil applies the NotNil predicate on the "progress" field.
func ProgressNotNil() predicate.Command {
	return predicate.Command(sql.FieldNotNull(FieldProgress))
}

// ProgressEqualFold applies the EqualFold predicate on the "progress" field.
func ProgressEqualFold(v string) predicate.Command {
	return predicate.Command(sql.FieldEqualFold(FieldProgress, v))
}

// ProgressContainsFold applies the ContainsFold predicate on the "progress" field.
func ProgressContainsFold(v string) predicate.Command {
	return predicate.Command(sql.FieldContainsFold(FieldProgress, v))
}

// InfoEQ applies the EQ predicate on the "info" field.
func InfoEQ(v string) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldInfo, v))
}

// InfoNEQ applies the NEQ predicate on the "info" field.
func InfoNEQ(v string) predicate.Command {
	return predicate.Command(sql.FieldNEQ(FieldInfo, v))
}

// InfoIn applies the In predicate on the "info" field.
func InfoIn(vs ...string) predicate.Command {
	return predicate.Command(sql.FieldIn(FieldInfo, vs...))
}

// InfoNotIn applies the NotIn predicate on the "info" field.
func InfoNotIn(vs ...string) predicate.Command {
	return predicate.Command(sql.FieldNotIn(FieldInfo, vs...))
}

// InfoGT applies the GT predicate on the "info" field.
func InfoGT(v string) predicate.Command {
	return predicate.Command(sql.FieldGT(FieldInfo, v))
}

// InfoGTE applies the GTE predicate on the "info" field.
func InfoGTE(v string) predicate.Command {
	return predicate.Command(sql.FieldGTE(FieldInfo, v))
}

// InfoLT applies the LT predicate on the "info" field.
func InfoLT(v string) predicate.Command {
	return predicate.Command(sql.FieldLT(FieldInfo, v))
}

// InfoLTE applies the LTE predicate on the "info" field.
func InfoLTE(v string) predicate.Command {
	return predicate.Command(sql.FieldLTE(FieldInfo, v))
}

// InfoContains applies the Contains predicate on the "info" field.
func InfoContains(v string) predicate.Command {
	return predicate.Command(sql.FieldContains(FieldInfo, v))
}

// InfoHasPrefix applies the HasPrefix predicate on the "info" field.
func InfoHasPrefix(v string) predicate.Command {
	return predicate.Command(sql.FieldHasPrefix(FieldInfo, v))
}

// InfoHasSuffix applies the HasSuffix predicate on the "info" field.
func InfoHasSuffix(v string) predicate.Command {
	return predicate.Command(sql.FieldHasSuffix(FieldInfo, v))
}

// InfoIsNil applies the IsNil predicate on the "info" field.
func InfoIsNil() predicate.Command {
	return predicate.Command(sql.FieldIsNull(FieldInfo))
}

// InfoNotNil applies the NotNil predicate on the "info" field.
func InfoNotNil() predicate.Command {
	return predicate.Command(sql.FieldNotNull(FieldInfo))
}

// InfoEqualFold applies the EqualFold predicate on the "info" field.
func InfoEqualFold(v string) predicate.Command {
	return predicate.Command(sql.FieldEqualFold(FieldInfo, v))
}

// InfoContainsFold applies the ContainsFold predicate on the "info" field.
func InfoContainsFold(v string) predicate.Command {
	return predicate.Command(sql.FieldContainsFold(FieldInfo, v))
}

// ArgsEQ applies the EQ predicate on the "args" field.
func ArgsEQ(v string) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldArgs, v))
}

// ArgsNEQ applies the NEQ predicate on the "args" field.
func ArgsNEQ(v string) predicate.Command {
	return predicate.Command(sql.FieldNEQ(FieldArgs, v))
}

// ArgsIn applies the In predicate on the "args" field.
func ArgsIn(vs ...string) predicate.Command {
	return predicate.Command(sql.FieldIn(FieldArgs, vs...))
}

// ArgsNotIn applies the NotIn predicate on the "args" field.
func ArgsNotIn(vs ...string) predicate.Command {
	return predicate.Command(sql.FieldNotIn(FieldArgs, vs...))
}

// ArgsGT applies the GT predicate on the "args" field.
func ArgsGT(v string) predicate.Command {
	return predicate.Command(sql.FieldGT(FieldArgs, v))
}

// ArgsGTE applies the GTE predicate on the "args" field.
func ArgsGTE(v string) predicate.Command {
	return predicate.Command(sql.FieldGTE(FieldArgs, v))
}

// ArgsLT applies the LT predicate on the "args" field.
func ArgsLT(v string) predicate.Command {
	return predicate.Command(sql.FieldLT(FieldArgs, v))
}

// ArgsLTE applies the LTE predicate on the "args" field.
func ArgsLTE(v string) predicate.Command {
	return predicate.Command(sql.FieldLTE(FieldArgs, v))
}

// ArgsContains applies the Contains predicate on the "args" field.
func ArgsContains(v string) predicate.Command {
	return predicate.Command(sql.FieldContains(FieldArgs, v))
}

// ArgsHasPrefix applies the HasPrefix predicate on the "args" field.
func ArgsHasPrefix(v string) predicate.Command {
	return predicate.Command(sql.FieldHasPrefix(FieldArgs, v))
}

// ArgsHasSuffix applies the HasSuffix predicate on the "args" field.
func ArgsHasSuffix(v string) predicate.Command {
	return predicate.Command(sql.FieldHasSuffix(FieldArgs, v))
}

// ArgsIsNil applies the IsNil predicate on the "args" field.
func ArgsIsNil() predicate.Command {
	return predicate.Command(sql.FieldIsNull(FieldArgs))
}

// ArgsNotNil applies the NotNil predicate on the "args" field.
func ArgsNotNil() predicate.Command {
	return predicate.Command(sql.FieldNotNull(FieldArgs))
}

// ArgsEqualFold applies the EqualFold predicate on the "args" field.
func ArgsEqualFold(v string) predicate.Command {
	return predicate.Command(sql.FieldEqualFold(FieldArgs, v))
}

// ArgsContainsFold applies the ContainsFold predicate on the "args" field.
func ArgsContainsFold(v string) predicate.Command {
	return predicate.Command(sql.FieldContainsFold(FieldArgs, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Command) predicate.Command {
	return predicate.Command(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Command) predicate.Command {
	return predicate.Command(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Command) predicate.Command {
	return predicate.Command(sql.NotPredicates(p))
}
