// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/srad/mediasink/ent/command"
)

// Command is the model entity for the Command schema.
type Command struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Pid holds the value of the "pid" field.
	Pid int `json:"pid,omitempty"`
	// Command holds the value of the "command" field.
	Command string `json:"command,omitempty"`
	// Progress holds the value of the "progress" field.
	Progress string `json:"progress,omitempty"`
	// Info holds the value of the "info" field.
	Info string `json:"info,omitempty"`
	// Args holds the value of the "args" field.
	Args         string `json:"args,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Command) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case command.FieldID, command.FieldPid:
			values[i] = new(sql.NullInt64)
		case command.FieldCommand, command.FieldProgress, command.FieldInfo, command.FieldArgs:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Command fields.
func (c *Command) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case command.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case command.FieldPid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pid", values[i])
			} else if value.Valid {
				c.Pid = int(value.Int64)
			}
		case command.FieldCommand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field command", values[i])
			} else if value.Valid {
				c.Command = value.String
			}
		case command.FieldProgress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field progress", values[i])
			} else if value.Valid {
				c.Progress = value.String
			}
		case command.FieldInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field info", values[i])
			} else if value.Valid {
				c.Info = value.String
			}
		case command.FieldArgs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field args", values[i])
			} else if value.Valid {
				c.Args = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Command.
// This includes values selected through modifiers, order, etc.
func (c *Command) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Command.
// Note that you need to call Command.Unwrap() before calling this method if this Command
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Command) Update() *CommandUpdateOne {
	return NewCommandClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Command entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Command) Unwrap() *Command {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Command is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Command) String() string {
	var builder strings.Builder
	builder.WriteString("Command(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("pid=")
	builder.WriteString(fmt.Sprintf("%v", c.Pid))
	builder.WriteString(", ")
	builder.WriteString("command=")
	builder.WriteString(c.Command)
	builder.WriteString(", ")
	builder.WriteString("progress=")
	builder.WriteString(c.Progress)
	builder.WriteString(", ")
	builder.WriteString("info=")
	builder.WriteString(c.Info)
	builder.WriteString(", ")
	builder.WriteString("args=")
	builder.WriteString(c.Args)
	builder.WriteByte(')')
	return builder.String()
}

// Commands is a parsable slice of Command.
type Commands []*Command
