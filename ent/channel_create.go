// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/srad/mediasink/ent/channel"
	"github.com/srad/mediasink/ent/job"
	"github.com/srad/mediasink/ent/recording"
)

// ChannelCreate is the builder for creating a Channel entity.
type ChannelCreate struct {
	config
	mutation *ChannelMutation
	hooks    []Hook
}

// SetChannelName sets the "channel_name" field.
func (cc *ChannelCreate) SetChannelName(s string) *ChannelCreate {
	cc.mutation.SetChannelName(s)
	return cc
}

// SetDisplayName sets the "display_name" field.
func (cc *ChannelCreate) SetDisplayName(s string) *ChannelCreate {
	cc.mutation.SetDisplayName(s)
	return cc
}

// SetSkipStart sets the "skip_start" field.
func (cc *ChannelCreate) SetSkipStart(u uint) *ChannelCreate {
	cc.mutation.SetSkipStart(u)
	return cc
}

// SetNillableSkipStart sets the "skip_start" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableSkipStart(u *uint) *ChannelCreate {
	if u != nil {
		cc.SetSkipStart(*u)
	}
	return cc
}

// SetMinDuration sets the "min_duration" field.
func (cc *ChannelCreate) SetMinDuration(u uint) *ChannelCreate {
	cc.mutation.SetMinDuration(u)
	return cc
}

// SetURL sets the "url" field.
func (cc *ChannelCreate) SetURL(s string) *ChannelCreate {
	cc.mutation.SetURL(s)
	return cc
}

// SetIsFav sets the "is_fav" field.
func (cc *ChannelCreate) SetIsFav(b bool) *ChannelCreate {
	cc.mutation.SetIsFav(b)
	return cc
}

// SetNillableIsFav sets the "is_fav" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableIsFav(b *bool) *ChannelCreate {
	if b != nil {
		cc.SetIsFav(*b)
	}
	return cc
}

// SetIsPaused sets the "is_paused" field.
func (cc *ChannelCreate) SetIsPaused(b bool) *ChannelCreate {
	cc.mutation.SetIsPaused(b)
	return cc
}

// SetNillableIsPaused sets the "is_paused" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableIsPaused(b *bool) *ChannelCreate {
	if b != nil {
		cc.SetIsPaused(*b)
	}
	return cc
}

// SetIsDeleted sets the "is_deleted" field.
func (cc *ChannelCreate) SetIsDeleted(b bool) *ChannelCreate {
	cc.mutation.SetIsDeleted(b)
	return cc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableIsDeleted(b *bool) *ChannelCreate {
	if b != nil {
		cc.SetIsDeleted(*b)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ChannelCreate) SetCreatedAt(t time.Time) *ChannelCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableCreatedAt(t *time.Time) *ChannelCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetTags sets the "tags" field.
func (cc *ChannelCreate) SetTags(s []string) *ChannelCreate {
	cc.mutation.SetTags(s)
	return cc
}

// AddRecordingIDs adds the "recordings" edge to the Recording entity by IDs.
func (cc *ChannelCreate) AddRecordingIDs(ids ...int) *ChannelCreate {
	cc.mutation.AddRecordingIDs(ids...)
	return cc
}

// AddRecordings adds the "recordings" edges to the Recording entity.
func (cc *ChannelCreate) AddRecordings(r ...*Recording) *ChannelCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cc.AddRecordingIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the Job entity by IDs.
func (cc *ChannelCreate) AddJobIDs(ids ...uuid.UUID) *ChannelCreate {
	cc.mutation.AddJobIDs(ids...)
	return cc
}

// AddJobs adds the "jobs" edges to the Job entity.
func (cc *ChannelCreate) AddJobs(j ...*Job) *ChannelCreate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cc.AddJobIDs(ids...)
}

// Mutation returns the ChannelMutation object of the builder.
func (cc *ChannelCreate) Mutation() *ChannelMutation {
	return cc.mutation
}

// Save creates the Channel in the database.
func (cc *ChannelCreate) Save(ctx context.Context) (*Channel, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChannelCreate) SaveX(ctx context.Context) *Channel {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChannelCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChannelCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ChannelCreate) defaults() {
	if _, ok := cc.mutation.SkipStart(); !ok {
		v := channel.DefaultSkipStart
		cc.mutation.SetSkipStart(v)
	}
	if _, ok := cc.mutation.IsFav(); !ok {
		v := channel.DefaultIsFav
		cc.mutation.SetIsFav(v)
	}
	if _, ok := cc.mutation.IsPaused(); !ok {
		v := channel.DefaultIsPaused
		cc.mutation.SetIsPaused(v)
	}
	if _, ok := cc.mutation.IsDeleted(); !ok {
		v := channel.DefaultIsDeleted
		cc.mutation.SetIsDeleted(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := channel.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChannelCreate) check() error {
	if _, ok := cc.mutation.ChannelName(); !ok {
		return &ValidationError{Name: "channel_name", err: errors.New(`ent: missing required field "Channel.channel_name"`)}
	}
	if v, ok := cc.mutation.ChannelName(); ok {
		if err := channel.ChannelNameValidator(v); err != nil {
			return &ValidationError{Name: "channel_name", err: fmt.Errorf(`ent: validator failed for field "Channel.channel_name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "Channel.display_name"`)}
	}
	if v, ok := cc.mutation.DisplayName(); ok {
		if err := channel.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "Channel.display_name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.SkipStart(); !ok {
		return &ValidationError{Name: "skip_start", err: errors.New(`ent: missing required field "Channel.skip_start"`)}
	}
	if _, ok := cc.mutation.MinDuration(); !ok {
		return &ValidationError{Name: "min_duration", err: errors.New(`ent: missing required field "Channel.min_duration"`)}
	}
	if _, ok := cc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Channel.url"`)}
	}
	if v, ok := cc.mutation.URL(); ok {
		if err := channel.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Channel.url": %w`, err)}
		}
	}
	if _, ok := cc.mutation.IsFav(); !ok {
		return &ValidationError{Name: "is_fav", err: errors.New(`ent: missing required field "Channel.is_fav"`)}
	}
	if _, ok := cc.mutation.IsPaused(); !ok {
		return &ValidationError{Name: "is_paused", err: errors.New(`ent: missing required field "Channel.is_paused"`)}
	}
	if _, ok := cc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "Channel.is_deleted"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Channel.created_at"`)}
	}
	return nil
}

func (cc *ChannelCreate) sqlSave(ctx context.Context) (*Channel, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ChannelCreate) createSpec() (*Channel, *sqlgraph.CreateSpec) {
	var (
		_node = &Channel{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(channel.Table, sqlgraph.NewFieldSpec(channel.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.ChannelName(); ok {
		_spec.SetField(channel.FieldChannelName, field.TypeString, value)
		_node.ChannelName = value
	}
	if value, ok := cc.mutation.DisplayName(); ok {
		_spec.SetField(channel.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := cc.mutation.SkipStart(); ok {
		_spec.SetField(channel.FieldSkipStart, field.TypeUint, value)
		_node.SkipStart = value
	}
	if value, ok := cc.mutation.MinDuration(); ok {
		_spec.SetField(channel.FieldMinDuration, field.TypeUint, value)
		_node.MinDuration = value
	}
	if value, ok := cc.mutation.URL(); ok {
		_spec.SetField(channel.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := cc.mutation.IsFav(); ok {
		_spec.SetField(channel.FieldIsFav, field.TypeBool, value)
		_node.IsFav = value
	}
	if value, ok := cc.mutation.IsPaused(); ok {
		_spec.SetField(channel.FieldIsPaused, field.TypeBool, value)
		_node.IsPaused = value
	}
	if value, ok := cc.mutation.IsDeleted(); ok {
		_spec.SetField(channel.FieldIsDeleted, field.TypeBool, value)
		_node.IsDeleted = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(channel.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.Tags(); ok {
		_spec.SetField(channel.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if nodes := cc.mutation.RecordingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.RecordingsTable,
			Columns: []string{channel.RecordingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recording.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.JobsTable,
			Columns: []string{channel.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChannelCreateBulk is the builder for creating many Channel entities in bulk.
type ChannelCreateBulk struct {
	config
	err      error
	builders []*ChannelCreate
}

// Save creates the Channel entities in the database.
func (ccb *ChannelCreateBulk) Save(ctx context.Context) ([]*Channel, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Channel, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChannelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChannelCreateBulk) SaveX(ctx context.Context) []*Channel {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChannelCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChannelCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
